{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Square","props","state","history","e","this","setState","clearAll","id","onClick","buttonIsClicked","onContextMenu","resetIndividual","text","React","Component","Board","incrementAmount","table","i","children","j","push","prevAmount","className","makeBoard","incrementAll","ReactDOM","render","document","getElementById","addEventListener","event","preventDefault","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,8LCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICZAC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAAS,GAJM,E,4DAQHC,GACdC,KAAKC,SAAS,CACZH,QAASE,KAAKH,MAAMC,QAAU,M,sCAIlBC,GACdC,KAAKC,SAAS,CACZH,QAAS,M,+BAKH,IAAD,OAOP,OANIE,KAAKJ,MAAMM,UACbF,KAAKC,SAAS,CACZH,QAAS,IAKX,wBACEK,GAAG,eACHC,QAAS,SAACL,GAAD,OAAO,EAAKM,gBAAgBN,IACrCO,cAAe,SAACP,GAAD,OAAO,EAAKQ,gBAAgBR,KAE1CC,KAAKH,MAAMC,QAAUE,KAAKJ,MAAMY,U,GAnCpBC,IAAMC,WAyCrBC,E,kDACJ,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXe,gBAAiB,EACjBV,UAAU,GALK,E,wDAYjB,IADA,IAAIW,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIC,EAAW,GACNC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASE,KAAK,kBAAC,EAAD,CAAQf,SAAUF,KAAKH,MAAMK,SAAUM,KAAMR,KAAKH,MAAMe,mBAExEC,EAAMI,KAAK,4BAAKF,IASlB,OANIf,KAAKH,MAAMK,UACbF,KAAKC,SAAS,CACZC,UAAU,IAIPW,I,mCAGId,GACX,IAAMmB,EAAalB,KAAKH,MAAMe,gBAC9BZ,KAAKC,SAAS,CACZW,gBAAiBM,EAAa,M,+BAIzBnB,GACPC,KAAKC,SAAS,CACZC,UAAU,EACVU,gBAAiB,M,+BAIX,IAAD,OAGP,OACE,6BACE,2BAAOT,GAAG,YAAYgB,UAAU,WAC7BnB,KAAKoB,aAER,yBAAKD,UAAU,aACb,6BACE,6BACA,4BAAQhB,GAAG,eAAeC,QAAS,SAACL,GAAD,OAAO,EAAKsB,aAAatB,KAA5D,iBACA,kDAAwBC,KAAKH,MAAMe,iBACnC,8BAEF,4BAAQT,GAAG,WAAWC,QAAS,SAACL,GAAD,OAAO,EAAKG,SAASH,KAApD,aACA,6F,GA5DUU,IAAMC,WAmE1BY,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,cAI1BD,SAASC,eAAe,aAAaC,iBAAiB,eAAe,SAAAC,GAAK,OAAIA,EAAMC,oBDW9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.81d47431.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nclass Square extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      history: 0,\r\n    }\r\n  }\r\n\r\n  buttonIsClicked(e) {\r\n    this.setState({\r\n      history: this.state.history + 1,\r\n    });\r\n  }\r\n\r\n  resetIndividual(e) {\r\n    this.setState({\r\n      history: 0,\r\n      \r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.props.clearAll) {\r\n      this.setState({\r\n        history: 0,\r\n      });\r\n    }\r\n\r\n    return (\r\n      <td \r\n        id=\"squareButton\"\r\n        onClick={(e) => this.buttonIsClicked(e)}\r\n        onContextMenu={(e) => this.resetIndividual(e)}\r\n      >\r\n        {this.state.history + this.props.text}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      incrementAmount: 0,\r\n      clearAll: false\r\n    }\r\n\r\n  }\r\n  \r\n  makeBoard()  {\r\n    let table = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      let children = [];\r\n      for (let j = 0; j < 5; j++) {\r\n        children.push(<Square clearAll={this.state.clearAll} text={this.state.incrementAmount}/>);\r\n      }\r\n      table.push(<tr>{children}</tr>);\r\n    }\r\n\r\n    if (this.state.clearAll) {\r\n      this.setState({\r\n        clearAll: false,\r\n      })\r\n    }\r\n\r\n    return table;\r\n  }\r\n\r\n  incrementAll(e) {\r\n    const prevAmount = this.state.incrementAmount;\r\n    this.setState({\r\n      incrementAmount: prevAmount + 1,\r\n    });\r\n  }\r\n\r\n  clearAll(e) {\r\n    this.setState({\r\n      clearAll: true,\r\n      incrementAmount: 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const tempVar = 1;\r\n\r\n    return(\r\n      <div>\r\n        <table id=\"myTableId\" className=\"myTable\">\r\n          {this.makeBoard()}\r\n        </table>\r\n        <div className=\"botOfGrid\">\r\n          <div>\r\n            <br />\r\n            <button id=\"incrementAll\" onClick={(e) => this.incrementAll(e)}>Increment All</button>\r\n            <div>Increment Amount: {this.state.incrementAmount}</div>\r\n            <br />\r\n          </div>\r\n          <button id=\"clearAll\" onClick={(e) => this.clearAll(e)}>Clear All</button>\r\n          <div>Right Click Individual Box to Reset Individual History</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Board />,\r\n  document.getElementById('reactSide')\r\n);\r\n\r\n// prevent right click on table\r\ndocument.getElementById('myTableId').addEventListener('contextmenu', event => event.preventDefault());\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}