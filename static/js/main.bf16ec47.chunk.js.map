{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Square","props","state","history","e","this","setState","clearAll","id","onClick","buttonIsClicked","onContextMenu","resetIndividual","text","React","Component","Board","incrementAmount","table","i","children","j","push","prevAmount","className","makeBoard","incrementAll","ReactDOM","render","document","getElementById","addEventListener","event","preventDefault","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,8LCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICZAC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAAS,GAJM,E,4DAQHC,GACdC,KAAKC,SAAS,CACZH,QAASE,KAAKH,MAAMC,QAAU,M,sCAIlBC,GACdC,KAAKC,SAAS,CACZH,QAAS,M,+BAKH,IAAD,OAOP,OANIE,KAAKJ,MAAMM,UACbF,KAAKC,SAAS,CACZH,QAAS,IAKX,wBACEK,GAAG,eACHC,QAAS,SAACL,GAAD,OAAO,EAAKM,gBAAgBN,IACrCO,cAAe,SAACP,GAAD,OAAO,EAAKQ,gBAAgBR,KAE1CC,KAAKH,MAAMC,QAAUE,KAAKJ,MAAMY,U,GAnCpBC,IAAMC,WAyCrBC,E,kDACJ,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXe,gBAAiB,EACjBV,UAAU,GALK,E,wDAYjB,IADA,IAAIW,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIC,EAAW,GACNC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASE,KAAK,kBAAC,EAAD,CAAQf,SAAUF,KAAKH,MAAMK,SAAUM,KAAMR,KAAKH,MAAMe,mBAExEC,EAAMI,KAAK,4BAAKF,IASlB,OANIf,KAAKH,MAAMK,UACbF,KAAKC,SAAS,CACZC,UAAU,IAIPW,I,mCAGId,GACX,IAAMmB,EAAalB,KAAKH,MAAMe,gBAC9BZ,KAAKC,SAAS,CACZW,gBAAiBM,EAAa,M,+BAIzBnB,GACPC,KAAKC,SAAS,CACZC,UAAU,EACVU,gBAAiB,M,+BAIX,IAAD,OAGP,OACE,6BACE,2BAAOT,GAAG,YAAYgB,UAAU,WAC7BnB,KAAKoB,aAER,yBAAKD,UAAU,aACb,6BACE,6BACA,4BAAQhB,GAAG,eAAeC,QAAS,SAACL,GAAD,OAAO,EAAKsB,aAAatB,KAA5D,iBACA,kDAAwBC,KAAKH,MAAMe,iBACnC,8BAEF,4BAAQT,GAAG,WAAWC,QAAS,SAACL,GAAD,OAAO,EAAKG,SAASH,KAApD,aACA,6F,GA5DUU,IAAMC,WAmE1BY,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SAI1BD,SAASC,eAAe,aAAaC,iBAAiB,eAAe,SAAAC,GAAK,OAAIA,EAAMC,oBDW9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf16ec47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: 0,\n    }\n  }\n\n  buttonIsClicked(e) {\n    this.setState({\n      history: this.state.history + 1,\n    });\n  }\n\n  resetIndividual(e) {\n    this.setState({\n      history: 0,\n      \n    })\n  }\n\n  render() {\n    if (this.props.clearAll) {\n      this.setState({\n        history: 0,\n      });\n    }\n\n    return (\n      <td \n        id=\"squareButton\"\n        onClick={(e) => this.buttonIsClicked(e)}\n        onContextMenu={(e) => this.resetIndividual(e)}\n      >\n        {this.state.history + this.props.text}\n      </td>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      incrementAmount: 0,\n      clearAll: false\n    }\n\n  }\n  \n  makeBoard()  {\n    let table = [];\n    for (let i = 0; i < 5; i++) {\n      let children = [];\n      for (let j = 0; j < 5; j++) {\n        children.push(<Square clearAll={this.state.clearAll} text={this.state.incrementAmount}/>);\n      }\n      table.push(<tr>{children}</tr>);\n    }\n\n    if (this.state.clearAll) {\n      this.setState({\n        clearAll: false,\n      })\n    }\n\n    return table;\n  }\n\n  incrementAll(e) {\n    const prevAmount = this.state.incrementAmount;\n    this.setState({\n      incrementAmount: prevAmount + 1,\n    });\n  }\n\n  clearAll(e) {\n    this.setState({\n      clearAll: true,\n      incrementAmount: 0\n    });\n  }\n\n  render() {\n    const tempVar = 1;\n\n    return(\n      <div>\n        <table id=\"myTableId\" className=\"myTable\">\n          {this.makeBoard()}\n        </table>\n        <div className=\"botOfGrid\">\n          <div>\n            <br />\n            <button id=\"incrementAll\" onClick={(e) => this.incrementAll(e)}>Increment All</button>\n            <div>Increment Amount: {this.state.incrementAmount}</div>\n            <br />\n          </div>\n          <button id=\"clearAll\" onClick={(e) => this.clearAll(e)}>Clear All</button>\n          <div>Right Click Individual Box to Reset Individual History</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Board />,\n  document.getElementById('root')\n);\n\n// prevent right click on table\ndocument.getElementById('myTableId').addEventListener('contextmenu', event => event.preventDefault());\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}