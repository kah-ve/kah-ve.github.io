{"version":3,"sources":["TopNav.js","GitHubApp.js","SudokuApp.js","FrontPage.js","serviceWorker.js","index.js"],"names":["TopNav","class","className","to","React","Component","Card","props","this","bio","public_repos","followers","src","avatar_url","name","Form","handleSubmit","event","a","preventDefault","fetch","state","username","res","status","json","jsonObj","onSubmit","console","log","setState","onNameChange","target","value","type","onChange","placeholder","required","GitHubApp","addNewProfile","profileData","prev","profiles","myData","id","data","CardList","map","profile","key","Square","history","e","clearAll","onClick","buttonIsClicked","onContextMenu","resetIndividual","text","Board","contextMenu","incrementAmount","table","i","children","j","push","prevAmount","makeBoard","incrementAll","FrontPage","Boolean","window","location","hostname","match","routing","exact","path","component","SudokuApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4271c5ed.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\n\r\nclass TopNav extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n      <div class=\"TopNavLinkButtons\">\r\n        <Link className=\"theLink\" to=\"./\">Go to Home Page</Link>\r\n        <Link className=\"theLink\" to=\"./GitHubApp\">Go to GitHub App</Link>\r\n        <Link className=\"theLink\" to=\"./SudokuApp\">Go to Sudoku App</Link>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopNav;","import React from \"react\";\r\nimport TopNav from './TopNav';\r\nimport \"./GitHubApp.css\"\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const output = `\r\n    Bio: ${this.props.bio} <br />Public Repos: ${this.props.public_repos} \\\r\n    | Followers: ${this.props.followers}`;\r\n\r\n    return (\r\n      <div className=\"imgandcard\">\r\n        <div className=\"imgCard\">\r\n          <img src={this.props.avatar_url} />\r\n        </div>\r\n        <div className=\"github-profile\">\r\n          <div className=\"info\">\r\n            <div className=\"name\">{this.props.name}</div>\r\n            <div className=\"company\">\r\n              <span className=\"textDesc\">Bio:</span> {this.props.bio} <br />\r\n              <span className=\"textDesc\">Public Repos:</span> {this.props.public_repos} <br />\r\n              <span className=\"textDesc\">Followers:</span> {this.props.followers} <br />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n    };\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n      const res = await fetch(\r\n        `https://api.github.com/users/${this.state.username}`\r\n      );\r\n      if (res.status != \"404\") {\r\n        const jsonObj = await res.json();\r\n        this.props.onSubmit(jsonObj);\r\n        console.log(jsonObj);\r\n        this.setState({\r\n          username: \"\",\r\n        });\r\n      }\r\n      else {\r\n        console.log(\"API Fetch Failed.\");\r\n      }\r\n\r\n  };\r\n\r\n  onNameChange = (event) => {\r\n    this.setState({\r\n      username: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form type=\"submit\" className=\"formBox\" onSubmit={this.handleSubmit}>\r\n        <input\r\n          className=\"inputGit\"\r\n          type=\"text\"\r\n          onChange={this.onNameChange}\r\n          value={this.state.username}\r\n          placeholder=\"GitHub username\"\r\n          required\r\n        />\r\n        <button className=\"buttonGit\">Add User</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nclass GitHubApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      profiles: myData,\r\n    };\r\n  }\r\n\r\n  addNewProfile = (profileData) => {\r\n    this.setState( prev => (\r\n      {profiles: [...prev.profiles, profileData]}\r\n    ))\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <TopNav />\r\n        <div className=\"App\">\r\n          <div id=\"titleApp\">GitHub Cards</div>\r\n          <Form onSubmit={this.addNewProfile} />\r\n          <CardList data={this.state.profiles} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <>\r\n      {props.data.map((profile) => (\r\n        <Card key={profile.id} {...profile} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst myData = [\r\n  {\r\n    name: \"John Smith\",\r\n    avatar_url:\r\n      \"https://wallpaperhd.wiki/wp-content/uploads/4k-wallpaper-minimalist-the-witcher-3-wild-hunt-minimalist-uhdpaper.com-4k-5.1321-wp.thumbnail.jpg\",\r\n    bio: \"Software Engineer at Earth Labs\",\r\n    public_repos: 3,\r\n    followers: 5\r\n  },\r\n];\r\n\r\nexport default GitHubApp;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './SudokuApp.css';\r\nimport TopNav from './TopNav';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        history: 0,\r\n      }\r\n    }\r\n  \r\n    buttonIsClicked(e) {\r\n      this.setState({\r\n        history: this.state.history + 1,\r\n      });\r\n    }\r\n  \r\n    resetIndividual(e) {\r\n      this.setState({\r\n        history: 0,\r\n        \r\n      })\r\n    }\r\n  \r\n    render() {\r\n      if (this.props.clearAll) {\r\n        this.setState({\r\n          history: 0,\r\n        });\r\n      }\r\n  \r\n      return (\r\n        <td \r\n          id=\"squareButton\"\r\n          onClick={(e) => this.buttonIsClicked(e)}\r\n          onContextMenu={(e) => this.resetIndividual(e)}\r\n        >\r\n          {this.state.history + this.props.text}\r\n        </td>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        incrementAmount: 0,\r\n        clearAll: false\r\n      }\r\n  \r\n    }\r\n    \r\n    makeBoard()  {\r\n      let table = [];\r\n      for (let i = 0; i < 5; i++) {\r\n        let children = [];\r\n        for (let j = 0; j < 5; j++) {\r\n          children.push(<Square clearAll={this.state.clearAll} text={this.state.incrementAmount}/>);\r\n        }\r\n        table.push(<tr>{children}</tr>);\r\n      }\r\n  \r\n      if (this.state.clearAll) {\r\n        this.setState({\r\n          clearAll: false,\r\n        })\r\n      }\r\n  \r\n      return table;\r\n    }\r\n  \r\n    incrementAll(e) {\r\n      const prevAmount = this.state.incrementAmount;\r\n      this.setState({\r\n        incrementAmount: prevAmount + 1,\r\n      });\r\n    }\r\n  \r\n    clearAll(e) {\r\n      this.setState({\r\n        clearAll: true,\r\n        incrementAmount: 0\r\n      });\r\n    }\r\n\r\n    contextMenu = (e) => {\r\n      e.preventDefault();\r\n    };\r\n\r\n    render() {\r\n      const tempVar = 1;\r\n  \r\n      return(\r\n        <div>\r\n          <TopNav />\r\n          <table id=\"myTableId\" className=\"myTable\" onContextMenu={this.contextMenu}>\r\n            {this.makeBoard()}\r\n          </table>\r\n          <div className=\"botOfGrid\">\r\n            <div>\r\n              <br />\r\n              <button id=\"incrementAll\" onClick={(e) => this.incrementAll(e)}>Increment All</button>\r\n              <div>Increment Amount: {this.state.incrementAmount}</div>\r\n              <br />\r\n            </div>\r\n            <button id=\"clearAll\" onClick={(e) => this.clearAll(e)}>Clear All</button>\r\n            <div>Right Click Individual Box to Reset Individual History</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport default Board;\r\n","import React from 'react';\r\nimport './FrontPage.css';\r\n\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\n\r\nclass FrontPage extends React.Component {\r\n    render() {\r\n      return (\r\n        <>\r\n        <div id=\"Greeting\">\r\n          My React Apps\r\n        </div>\r\n        <div class=\"linkButtons\">\r\n          <Link className=\"theLink\" to=\"./GitHubApp\">Go to GitHub App</Link>\r\n          <Link className=\"theLink\" to=\"./SudokuApp\">Go to Sudoku App</Link>\r\n        </div>\r\n        </>\r\n      );\r\n    }\r\n}\r\n\r\nexport default FrontPage;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GitHubApp from './GitHubApp';\r\nimport SudokuApp from './SudokuApp';\r\nimport FrontPage from './FrontPage';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\n\r\nconst routing = (\r\n  <Router>\r\n    <div>\r\n      <Route exact path=\"/\" component={FrontPage} />\r\n      <Route path=\"/GitHubApp\" component={GitHubApp} />\r\n      <Route path=\"/SudokuApp\" component={SudokuApp} />\r\n    </div>\r\n  </Router>\r\n)\r\n\r\nReactDOM.render(\r\n  // <OutputComponents />\r\n  routing,\r\n  document.getElementById('reactSide')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}